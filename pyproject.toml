# ========================================================
# [project] Python Project METADATA
# Project metadata block
# Define general info for packaging, publishing, and documentation tools.
# ========================================================
[project]
name = "demo"  # Project name
version = "0.1.0"  # Initial version
description = "Demo about unit testing"  # Short description
readme = "README.md"  # Main README file
requires-python = ">=3.9"  # Minimum Python version required
authors = [
    { name = "Ismael Sanroman", email = "ismaelsanromansanchez@gmail.com" }  # Author and email
]
dependencies = []  # Dependencies (empty here)
classifiers = [
    "Programming Language :: Python :: 3.9",  # Compatible with Python 3.9
    "Operating System :: OS Independent"       # OS Independent
]

[project.urls]
"Source" = "https://github.com/ismaelsanroman/UnitTest_demo"  # Repository link

# ---------------------------------------------
# SETUPTOOLS
# Defines how and where to look for packages to include in the build
# ---------------------------------------------
[tool.setuptools.packages.find]
where = ["src"]      # Root folder to search for modules
include = ["pokemon"]  # Only include the 'pokemon' package

# ========================================================
# RUFF Configuration
# Ultra-fast linter and formatter for Python
# https://docs.astral.sh/ruff/
# ========================================================
[tool.ruff]
exclude = [
    ".bzr", ".direnv", ".eggs", ".git", ".git-rewrite", ".hg", ".ipynb_checkpoints",
    ".mypy_cache", ".nox", ".pants.d", ".pyenv", ".pytest_cache", ".pytype",
    ".ruff_cache", ".svn", ".tox", ".venv", ".vscode", "__pypackages__", "_build",
    "buck-out", "build", "dist", "node_modules", "site-packages", "venv", "docs",
    "gunicorn_config.py", "src/utils/helpers/azure/sharepoint.py"
]
line-length = 100
indent-width = 4
target-version = "py310"

[tool.ruff.lint]
select = [
    "A", "B", "C", "D", "E", "F", "I", "N", "S", "T", "Q", "W", "ANN", "COM", "TRY", "PTH", "RET", "TD", "ERA", "PT"
]
ignore = [
    "E203", "F403",                          # For compatibility with black, wildcard imports
    "ANN101", "ANN102", "ANN204", "ANN401", # Type hints not always required
    "D100", "D104", "D202", "D203",         # Docstring flexibility
    "TRY400",                                # Exception flexibility
    "PTH123",                                # Optional Pathlib usage
    "COM812"                                 # Trailing commas (black style)
]
fixable = ["ALL"]       # Allows auto-fix for all
unfixable = []          # No non-fixable rules defined
dummy-variable-rgx = "^(_|(__[a-zA-Z0-9_]+__[a-zA-Z0-9_]*))$"

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "S101", "D101", "D102", "D103", "ANN001", "ANN002", "ANN003", "ANN201"
]
"scripts/*.py"  = ["D", "T201", "ANN", "S603"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = "dynamic"

[tool.ruff.lint.isort]
split-on-trailing-comma = true
force-wrap-aliases = true
combine-as-imports = true

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.flake8-bandit]
check-typed-exception = true

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = [
    "fastapi.Depends", "fastapi.params.Depends",
    "fastapi.Query", "fastapi.params.Query"
]

# ========================================================
# Pytest - Test runner configuration
# ========================================================
[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
pythonpath = ["src"]
addopts = "-ra --strict-markers"

markers = [
    "unit: Fast unit tests.",
    "integration: Slow integration tests.",
    "e2e: Complete end-to-end tests.",
    "pokemon: Tests related to PokÃ©mon.",
    "create: Creation tests",
    "battle: PokÃ©mon battle tests",
    "happy_path: Tests for correct paths",
    "unhappy_path: Tests for incorrect paths",
    "functional: Functional tests.",
    "exception_handling: Exception handling tests.",
    "ports: Port tests.",
    "agents: Agent tests.",
    "utils: Utility tests.",
    "process: Process tests.",
    "performance: Performance tests.",
    "regression: Regression tests.",
    "smoke: Smoke tests.",
    "slow: Slow tests.",
    "db: Database tests."
]

# ========================================================
# Coverage - Code coverage configuration
# https://coverage.readthedocs.io/
# ========================================================
[tool.coverage.run]
branch = true
source = ["src"]

[tool.coverage.report]
show_missing = true
fail_under = 80

# ========================================================
# Hypothesis - Property based testing
# https://hypothesis.readthedocs.io/
# ========================================================
[tool.hypothesis]
deadline = 500
max_examples = 100
report_multiple_bugs = true

# ========================================================
# Xenon - Cyclomatic complexity analysis
# https://xenon.readthedocs.io/
# ========================================================
[tool.xenon]
max-absolute = "B"
max-modules = "B"
max-average = "B"
exclude = ["tests/*"]

# ========================================================
# Build System - Build system configuration
# ========================================================
[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"